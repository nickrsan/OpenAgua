{
  "name": "OpenAgua",
  "tagline": "OpenAgua is a new open source, web-based decision support system for water planning.",
  "body": "# OpenAgua technologies and methods\r\n\r\nFor now, this documentation is organized around the main user areas of the website, focusing on technical aspects (technologies involved, methods used, etc.), but also use in some cases. General help for the registered user is found on the site itself, under \"Help\".\r\n\r\n## General\r\n\r\n### Data management - Hydra Platform\r\nAs mentioned above, OpenAgua is built on Hydra Platform for data organization and management. Documentation for Hydra Platform is under development. However, the following seem to be reliable:\r\n* [API functions](http://umwrg.github.io/HydraPlatform/devdocs/HydraServer/index.html#api-functions)\r\n* [Example usage with JSON](http://umwrg.github.io/HydraPlatform/tutorials/plug-in/tutorial_json.html)\r\n\r\n### Back end\r\n\r\nOpenAgua uses a mix of [**JavaScript**](https://www.javascript.com) and [**jQuery**](https://jquery.com/) for client-side work and [**Flask**](http://flask.pocoo.org), \"a microframework for [**Python**](https://www.python.org) based on [**Werkzeug**](http://werkzeug.pocoo.org), [**Jinja 2**](http://jinja.pocoo.org/docs/dev/) and good intentions. Server-side work includes serving individual webpages and interactions with Hydra Platform, among other various functions. The use of Python enables easy introduction of custom Python modules as needed. OpenAgua takes as much advantage as possible of the Jinja 2 templating system that Flask uses.\r\n\r\nMany extensions have been written for Flask. Some of these are used by OpenAgua, as explained below.\r\n\r\n### Front end\r\n\r\nOpenAgua's front end is built using [**Bootstrap 3**](http://getbootstrap.com).\r\n\r\n## Site security: registration, login, etc.\r\nSite security is managed by Flask_User. Flask_User, in turn, uses a mix of other Flask extensions.\r\n\r\n## Home\r\n\r\nDocumentation forthcoming.\r\n\r\n## Manage\r\n\r\nThe \"Manage\" section allows the user to manage HP _projects_, _networks_, and _templates_.\r\n\r\nThe overall steps in creating a project + template + network are as follows (main HP functions involved in parentheses):\r\n1. Add a project (*add_project*)\r\n2. Add a network (*add_network*), selecting a template to add at the same time. The only available template for now is \"OpenAgua\"; this is created automatically if it doesn't already exist. During network creation, a default \"Baseline\" scenario (*add_scenario*) is created for the new network, similar to Hydra Modeller. \r\n\r\nFor project/network creation, HP functions are called as follows:\r\n1. *add_project*\r\n2. *add_network*\r\n3. *apply_template_to_network*\r\n4. *add_scenario*\r\n\r\n### Projects\r\n\r\n* **Add Project**: This uses HP's _add_project_ function.\r\n\r\n### Networks\r\n\r\n* **Add Network**: This uses HP's _add_network_ function with the user's active project.\r\n\r\n### Templates\r\n\r\nThe OpenAgua user cannot currently add a template via the interface.\r\n\r\n## Network Editor\r\n\r\n* **Add node**: The HP functions *add_node* is used, with the user's active *network_id*.\r\n* **Add link**: The HP function *add_link* is used, with the user's active *network_id*.\r\n\r\n## Data Editor\r\n\r\nThe basic data editor consists of three areas:\r\n\r\n1. Variable selector,\r\n2. Data editor and\r\n3. Data preview\r\n\r\n### Variable selector\r\nThe variable selector consists of dropdowns using [**boostrap-select**](https://silviomoreto.github.io/bootstrap-select/).\r\n\r\n### Data editor\r\nCurrently, the data editor only allows editing the \"descriptor\" field of the database. Text data is displayed and edited using the [**Ace** code editor](https://ace.c9.io).\r\n\r\nPython code is entered here. This code is evaluated using the evaluate function found in evaluator.py. Essentially, a string representation of a function is created, with the entered code as the body of the function. All lines are indented appropriately as needed for Python. The function is then called by the evaluator and assigned to a variable. The function is run once per time step.\r\n\r\nThe last line of the user-entered code is automatically prepended with \"return \", such that the user doesn't need to. This is most useful for simple cases, such as a constant value:\r\n\r\n```python\r\n5\r\n```\r\n\r\nHowever, the evaluator also automatically detects the presence of a \"return \" in the last line, such that the user may also include a return as desired. So `return x` on the last line is the same as `x`. In many cases, including `return` is simply a matter of personal preference. But this is particularly useful if a return is nested in the last part of a conditional statement. To demonstrate, the following three versions of code input yield the exact same result when evaluated:\r\n\r\n```python\r\nif date.month in [6,7,8]:\r\n    x = 0.5\r\nelse:\r\n    x = 1\r\nx\r\n```\r\n```python\r\nif date.month in [6,7,8]:\r\n    x = 0.5\r\nelse:\r\n    x = 1\r\nreturn x\r\n```\r\n\r\n```python\r\nif date.month in [6,7,8]:\r\n    return 0.5\r\nelse:\r\n    return 1\r\n```\r\n\r\nThis scheme enables the user to import, enter custom functions directly into the code, etc. In the future, this will also enable offering a range of custom Python functions. It will also allow the user to create, store, re-use, and share custom functions.\r\n\r\nThe last three examples above should raise a question: where does \"date\" come from? OpenAgua will include several built-in variables available for use. For now, this only includes the date of the function call. In the future, however, this will expand to include others as needed.\r\n\r\n## Scenario Builder\r\n\r\nNot built yet.\r\n\r\n## Model Dashboard\r\n\r\nDocumentation forthcoming.\r\n\r\n## Results Overview\r\n\r\nNot built yet.\r\n\r\n## Chart Maker\r\n\r\nNot built yet. For now, there is an example chart built using [**Plotly**](http://plot.ly). The intent is to build a control panel for building Plotly graphs.\r\n\r\n## My Charts\r\n\r\nNot built yet.\r\n\r\n## Charts Dashboard\r\n\r\nNot built yet.\r\n\r\n## Advanced\r\n\r\n## Data Exporter\r\n\r\nNot built yet. This might be best deferred to the Hydra Platform Web Interface.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}